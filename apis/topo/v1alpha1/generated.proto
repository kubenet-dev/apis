/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.kubenet_dev.apis.apis.topo.v1alpha1;

import "github.com/kform-dev/choreo/apis/condition/v1alpha1/generated.proto";
import "github.com/kubenet-dev/apis/apis/network/core/v1alpha1/generated.proto";
import "github.com/kuidio/kuid/apis/common/v1alpha1/generated.proto";
import "github.com/kuidio/kuid/apis/infra/v1alpha1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/kubenet-dev/apis/apis/topo/v1alpha1";

// Topology defines the Schema for the Topology API
message Topology {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional TopologySpec spec = 2;

  optional TopologyStatus status = 3;
}

// TopologyEndpoint define the topology endpoint of the node
message TopologyEndpoint {
  // ModuleBay defines the moduleBay reference id
  optional string node = 1;

  // ModuleBay defines the moduleBay reference id
  optional uint32 moduleBay = 2;

  // Module defines the module reference id
  optional uint32 module = 3;

  // Port defines the id of the port
  optional uint32 port = 4;

  // Adaptor defines the adaptor used in the port, like an sfp, qsfp
  optional string adaptor = 5;

  // Endpoint defines the name of the endpoint
  optional uint32 endpoint = 6;
}

message TopologyLink {
  // Endpoints define the 2 endpoint identifiers of the link
  // +kubebuilder:validation:MinItems:=2
  // +kubebuilder:validation:MaxItems:=2
  // +listType:=atomic
  repeated TopologyEndpoint endpoints = 1;

  // BFD defines the BFD parameters for the link
  optional .github.com.kubenet_dev.apis.apis.network.core.v1alpha1.BFDLinkParameters bfd = 2;

  // BGP defines the BGP parameters for the link
  optional .github.com.kubenet_dev.apis.apis.network.core.v1alpha1.BGPLinkParameters bgp = 3;

  // OSPF defines the OSPF parameters for the link
  optional .github.com.kubenet_dev.apis.apis.network.core.v1alpha1.OSPFLinkParameters ospf = 4;

  // ISIS defines the OSPF parameters for the link
  optional .github.com.kubenet_dev.apis.apis.network.core.v1alpha1.ISISLinkParameters isis = 5;
}

// TopologyList contains a list of Topologys
// +k8s:deepcopy-gen:Topologys=k8s.io/apimachinery/pkg/runtime.Object
message TopologyList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Topology items = 2;
}

message TopologyNode {
  // Node defines the node name the resource belongs to.
  // Ignored when used in the default section
  optional string name = 1;

  // Region defines the region this resource belongs to
  optional string region = 2;

  // Site defines the site this resource belongs to
  optional string site = 3;

  // Rack defines the rack in which the node is deployed
  // +optional
  optional string rack = 4;

  // relative position in the rack
  // +optional
  optional string position = 5;

  // UserDefinedLabels define metadata to the resource.
  // defined in the spec to distingiush metadata labels from user defined labels
  optional .github.com.kuidio.kuid.apis.common.v1alpha1.UserDefinedLabels userDefinedLabels = 6;

  // Location defines the location information where this resource is located
  // in lon/lat coordinates
  // +optional
  optional .github.com.kuidio.kuid.apis.infra.v1alpha1.Location location = 7;

  // Provider defines the provider implementing this resource.
  optional string provider = 8;

  // PlatformType define the type of platform implementing the nodespec
  optional string platformType = 9;

  // Version define the sw version implementing the resource
  optional string version = 10;
}

// TopologySpec defines the desired state of Topology
message TopologySpec {
  // Defaults define the node defaults
  optional TopologyNode defaults = 1;

  // Nodes define the nodes belonging to the topology
  repeated TopologyNode nodes = 2;

  // Links define the links interconnecting the nodes in the topology
  repeated TopologyLink links = 3;
}

// TopologyStatus defines the observed state of Topology
message TopologyStatus {
  // ConditionedStatus provides the status of the Readiness using conditions
  // if the condition is true the other attributes in the status are meaningful
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

