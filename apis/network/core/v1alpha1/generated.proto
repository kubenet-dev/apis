/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.kubenet_dev.apis.apis.network.core.v1alpha1;

import "github.com/kform-dev/choreo/apis/condition/v1alpha1/generated.proto";
import "github.com/kuidio/kuid/apis/backend/ipam/v1alpha1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/kubenet-dev/apis/apis/network/core/v1alpha1";

message BFDLinkParameters {
  // Disabled defines if bfd is disabled or not
  // +optional
  optional bool enabled = 1;

  // MinTx defines the desired minimal interval for sending BFD packets, in msec.
  // +optional
  optional uint32 minTx = 2;

  // MinTx defines the required minimal interval for receiving BFD packets, in msec.
  // +optional
  optional uint32 minRx = 3;

  // MinEchoRx defines the echo function timer, in msec.
  // +optional
  optional uint32 minEchoRx = 4;

  // Multiplier defines the number of missed packets before the session is considered down
  // +optional
  optional uint32 multiplier = 5;

  // TTL defines the time to live on the outgoing BFD packet
  // +kubebuilder:validation:Maximum:=255
  // +kubebuilder:validation:Minimum:=2
  // +optional
  optional uint32 ttl = 6;
}

message BGPLinkParameters {
  // BFD defines if BFD is enabled for the EGP on this interface
  // +kubebuilder:default:=true
  // +optional
  optional bool bfd = 1;
}

message IGPLinkParameters {
  // Type defines the type of network
  // +kubebuilder:validation:Enum=`pointToPoint`;`broadcast`;
  // +kubebuilder:default=pointToPoint
  // +optional
  optional string networkType = 1;

  // Passive defines if this interface is passive
  // +optional
  optional bool passive = 2;

  // BFD defines if BFD is enabled for the IGP on this interface
  // +kubebuilder:default:=true
  // +optional
  optional bool bfd = 3;

  // Metric defines the interface metric associated with the native routing topology
  // +optional
  optional uint32 metric = 4;
}

message ISISLinkParameters {
  // Generic IGP Link Parameters
  // +optional
  optional IGPLinkParameters igpLinkParameters = 1;

  // Defines the ISIS level the link is assocaited with
  // +optional
  optional string area = 2;
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:storageversion
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:resource:categories={kubenet}
// NetworkDesign is the NetworkDesign for the NetworkDesign API
// +k8s:openapi-gen=true
message NetworkDesign {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NetworkDesignSpec spec = 2;

  optional NetworkDesignStatus status = 3;
}

message NetworkDesignEncapsulation {
  optional NetworkDesignEncapsulationVXLAN vxlan = 1;

  optional NetworkDesignEncapsulationMPLS mpls = 2;

  optional NetworkDesignEncapsulationSRv6 srv6 = 3;
}

message NetworkDesignEncapsulationMPLS {
  optional NetworkDesignEncapsulationMPLSLDP ldp = 1;

  optional NetworkDesignEncapsulationMPLSSR sr = 2;

  optional NetworkDesignEncapsulationMPLSRSVP rsvp = 3;
}

message NetworkDesignEncapsulationMPLSLDP {
}

message NetworkDesignEncapsulationMPLSRSVP {
}

message NetworkDesignEncapsulationMPLSSR {
}

message NetworkDesignEncapsulationMPLSSRv6MicroSID {
}

message NetworkDesignEncapsulationSRv6 {
  optional NetworkDesignEncapsulationMPLSSRv6MicroSID ldp = 1;
}

message NetworkDesignEncapsulationVXLAN {
}

message NetworkDesignInterfaceParameters {
  // Prefixes defines the prefixes belonging to this network config
  // prefixLength would be indicated by a label
  repeated .github.com.kuidio.kuid.apis.backend.ipam.v1alpha1.Prefix prefixes = 1;

  // Addressing defines the addressing used in this network
  // +kubebuilder:validation:Enum=dualstack;ipv4numbered;ipv6numbered;ipv4unnumbered;ipv6unnumbered
  // +kubebuilder:default=dualstack
  optional string addressing = 2;
}

message NetworkDesignInterfaces {
  optional NetworkDesignInterfacesLoopback loopback = 1;

  optional NetworkDesignInterfacesUnderlay underlay = 2;
}

message NetworkDesignInterfacesLoopback {
  optional NetworkDesignInterfaceParameters parameters = 1;
}

message NetworkDesignInterfacesUnderlay {
  optional NetworkDesignInterfaceParameters parameters = 1;

  // VLANTagging defines if VLAN tagging should be used or not
  optional bool vlanTagging = 2;

  // BFD defines the bfd parameters on the interface
  optional BFDLinkParameters bfd = 3;
}

// +kubebuilder:object:root=true
// NetworkDesignClabList contains a list of NetworkDesignClabs
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message NetworkDesignList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated NetworkDesign items = 2;
}

message NetworkDesignProtocols {
  optional NetworkDesignProtocolsOSPF ospf = 1;

  optional NetworkDesignProtocolsISIS isis = 2;

  optional NetworkDesignProtocolsIBGP ibgp = 3;

  optional NetworkDesignProtocolsEBGP ebgp = 4;

  optional NetworkDesignProtocolsBGPEVPN bgpEVPN = 5;

  optional NetworkDesignProtocolsBGPVPNv4 bgpVPNv4 = 6;

  optional NetworkDesignProtocolsBGPVPNv6 bgpVPNv6 = 7;

  optional NetworkDesignProtocolsBGPRouteTarget bgpRouteTarget = 8;

  optional NetworkDesignProtocolsBGPLabeledUnicastv4 bgpLabeledUnicastv4 = 9;

  optional NetworkDesignProtocolsBGPLabeledUnicastv6 bgpLabeledUnicastv6 = 10;
}

message NetworkDesignProtocolsBGPEVPN {
}

message NetworkDesignProtocolsBGPLabeledUnicastv4 {
}

message NetworkDesignProtocolsBGPLabeledUnicastv6 {
}

message NetworkDesignProtocolsBGPRouteTarget {
}

message NetworkDesignProtocolsBGPVPNv4 {
}

message NetworkDesignProtocolsBGPVPNv6 {
}

message NetworkDesignProtocolsEBGP {
  optional string asPool = 1;

  // BFD defines if BFD is enabled globally on EBGP
  optional bool bfd = 2;
}

message NetworkDesignProtocolsIBGP {
  optional uint32 as = 1;

  optional bool localAS = 2;

  repeated string routeReflectors = 3;
}

message NetworkDesignProtocolsISIS {
  // Instance defines the name of the ISIS instance
  optional string instance = 1;

  // LevelCapability defines the level capability of the ISIS in the topology
  // +kubebuilder:validation:Enum=L2;L2;L1L2
  // +kubebuilder:default=L2
  optional string level = 2;

  // Areas defines the ISIS areas
  repeated string areas = 3;

  // MaxECMPPaths defines the maximum ecmp paths used in OSPF
  // +kubebuilder:validation:Maximum=64
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:default=1
  optional uint32 maxECMPPaths = 4;

  // BFD defines if BFD is enabled globally on ISIS
  optional bool bfd = 5;
}

message NetworkDesignProtocolsOSPF {
  // Instance defines the name of the OSPF instance
  optional string instance = 1;

  // Version defines the Version used for ospf
  // +kubebuilder:validation:Enum=v2;v3
  // +kubebuilder:default=v2
  optional string version = 2;

  // Area defines the default area used if not further refined on the interface.
  optional string area = 3;

  // MaxECMPPaths defines the maximum ecmp paths used in OSPF
  // +kubebuilder:validation:Maximum=64
  // +kubebuilder:validation:Minimum=1
  // +kubebuilder:default=1
  optional uint32 maxECMPPaths = 4;

  // BFD defines if BFD is enabled globally on OSPF
  optional bool bfd = 5;
}

// NetworkDesignSpec defines the desired state of NetworkDesign
message NetworkDesignSpec {
  // Interfaces define the interface parameters of the network design
  optional NetworkDesignInterfaces interfaces = 1;

  // Protocols define the network wide protocol parameters
  optional NetworkDesignProtocols protocols = 2;

  // Encapsultation define the encapsulation parameters
  optional NetworkDesignEncapsulation encapsulation = 3;
}

// NetworkDesignStatus defines the observed state of NetworkDesign
message NetworkDesignStatus {
  // ConditionedStatus provides the status of the NetworkDesign using conditions
  // - a ready condition indicates the overall status of the resource
  optional .github.com.kform_dev.choreo.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1;
}

message OSPFLinkParameters {
  // Generic IGP Link Parameters
  // +optional
  optional IGPLinkParameters igpLinkParameters = 1;

  // Defines the OSPF area the link is assocaited with
  // +optional
  optional string area = 2;
}

